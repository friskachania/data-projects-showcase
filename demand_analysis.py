# -*- coding: utf-8 -*-
"""demand analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D8M9bnQIDX3PrYiL9V3WAsA08JVr5TRh

## Data
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("beatafaron/fmcg-daily-sales-data-to-2022-2024")

print("Path to dataset files:", path)

import os
input_path = os.listdir("/kaggle/input/fmcg-daily-sales-data-to-2022-2024")
input_path

import pandas as pd
dataset_path = "/kaggle/input/fmcg-daily-sales-data-to-2022-2024"

file_path = os.path.join(dataset_path,'FMCG_2022_2024.csv')
data =pd.read_csv(file_path)
data.head()

#SKU(Stock Keepung unique) or unique indentifier
#promotion flag = 1 if promo active

"""## Inventory dan Dynamic demand analysis"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns

ds = data.copy()
ds['date'] = pd.to_datetime(ds['date'])

ds['revenue'] = ds['price_unit'] * ds['units_sold']
ds['stockout'] = (ds['stock_available'] == 0).astype(int)                     # deteksi stock kosng
ds['stok_vs_demand'] = ds['stock_available'] - ds['units_sold'] # selisih anatara stock dan permintaan
ds['inventory_ratio']= ds['stock_available'] / ds['delivered_qty']

total_stockout =ds['stockout'].sum()
total_stockout_percentage = (total_stockout / len(ds)) * 100

print(f"Total Stockout: {total_stockout}")
print(f"Total Stockout Percentage: {total_stockout_percentage:.2f}%")

stockout_byctg = ds.groupby(['category'])['stockout'].sum().sort_values (ascending=False).reset_index()
stockout_perreg= ds.groupby(['region'])['stockout'].sum().sort_values(ascending=False).reset_index()
stockout_byctg

# Fungsi untuk menampilkan nilai asli (jumlah stockout)
def absolute_value(val):
    total = sum(stockout_byctg['stockout'])
    absolute = int(round(val / 100 * total))
    return f'{absolute}'

# Pie chart
plt.figure(figsize=(6, 6))
plt.pie(
    stockout_byctg['stockout'],
    labels=stockout_byctg['category'],
    autopct=absolute_value,
    startangle=75,
    colors=plt.cm.Set3.colors
)
plt.title('Jumlah Stockout by Category')
plt.axis('equal')
plt.tight_layout()
plt.show()

## stock availability vs units sold( melihat demand)
ds['week'] = ds['date'].dt.to_period('W').dt.to_timestamp()
ds['month'] = ds['date'].dt.to_period('M').dt.to_timestamp()
ds['year'] = ds['date'].dt.year

weekly_inventory = ds.groupby(['week', 'category']).agg({'stock_available':'sum', 'units_sold':'sum'}).reset_index()
categories = weekly_inventory['category'].unique()


for cat in categories:
    df_cat = weekly_inventory[weekly_inventory['category'] == cat]

    fig, ax1 = plt.subplots(figsize=(10,5))

    color1 = 'tab:blue'
    ax1.set_xlabel('Week')
    ax1.set_ylabel('Units Sold', color=color1)
    ax1.plot(df_cat['week'], df_cat['units_sold'], color=color1, label='Units Sold')
    ax1.tick_params(axis='y', labelcolor=color1)
    ax1.tick_params(axis='x', rotation=45)

    ax2 = ax1.twinx()
    color2 = 'tab:red'
    ax2.set_ylabel('Stock Available', color=color2)
    ax2.plot(df_cat['week'], df_cat['stock_available'], color=color2, linestyle='--', label='Stock Available')
    ax2.tick_params(axis='y', labelcolor=color2)

    plt.title(f'{cat} – Units Sold vs Stock Available Over Time per mingguan')
    fig.tight_layout()
    plt.show()

monthly_inventory = ds.groupby(['month', 'category']).agg({'stock_available':'sum', 'units_sold':'sum'}).reset_index()
categories = monthly_inventory['category'].unique()


for cat in categories:
    df_cat = monthly_inventory[monthly_inventory['category'] == cat]

    fig, ax1 = plt.subplots(figsize=(10,5))

    color1 = 'tab:blue'
    ax1.set_xlabel('month')
    ax1.set_ylabel('Units Sold', color=color1)
    ax1.plot(df_cat['month'], df_cat['units_sold'], color=color1, label='Units Sold')
    ax1.tick_params(axis='y', labelcolor=color1)
    ax1.tick_params(axis='x', rotation=45)

    ax2 = ax1.twinx()
    color2 = 'tab:red'
    ax2.set_ylabel('Stock Available', color=color2)
    ax2.plot(df_cat['month'], df_cat['stock_available'], color=color2, linestyle='--', label='Stock Available')
    ax2.tick_params(axis='y', labelcolor=color2)

    plt.title(f'{cat} – Units Sold vs Stock Available Over Time per bulan')
    fig.tight_layout()
    plt.show()

stockout_ratio = ds.groupby('sku')['stockout'].mean().sort_values(ascending=False)
stockout_ratio = stockout_ratio.reset_index().rename(columns={'stockout': 'stockout_rat'})
print(stockout_ratio)

plt.figure(figsize=(10,6))
sns.barplot(data=stockout_ratio.head(10), x='sku', y='stockout_rat', palette='pastel')
plt.title('Top 10 SKU dengan Rasio Stockout Tertinggi')
plt.ylabel('Rasio Stockout')
plt.xlabel('SKU')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

promo_stockout = ds.groupby(['promotion_flag', 'category'])['stockout'].mean()
promo_stockout

# Jumlah stock out per category
category_stockout = ds[ds['stock_available']== 0]['category'].value_counts()
category_stockout

sns.barplot(x=category_stockout.index, y=category_stockout.values)
plt.title('Jumlah Stockout per Kategori')
plt.ylabel('Total Stockout')
plt.xlabel('Kategori')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Hitung jumlah stockout per SKU
sku_stockout = ds[ds['stockout'] == 1]['sku'].value_counts() #.head(10)

# Plot
plt.figure(figsize=(12,6))
sns.barplot(x=sku_stockout.index, y=sku_stockout.values, palette='Reds_r')
plt.title('Top 10 SKU dengan Jumlah Stockout Tertinggi')
plt.xlabel('SKU')
plt.ylabel('Frekuensi Stockout')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

sku_stockoutt =sku_stockout.head(6).index.tolist()
# Buat plot per SKU
for sku in sku_stockoutt:
    sku_data = ds[ds['sku'] == sku].copy()
    sku_weekly = sku_data.groupby('week').agg({
        'units_sold': 'sum',
        'stock_available': 'sum'
    }).reset_index()

    plt.figure(figsize=(12,5))
    sns.lineplot(data=sku_weekly, x='week', y='units_sold', label='Units Sold')
    sns.lineplot(data=sku_weekly, x='week', y='stock_available', label='Stock Available')
    plt.title(f'SKU {sku} - Weekly Units Sold vs Stock Available')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Hitung stockout untuk 5 SKU per region
sku_region_stockout = ds[(ds['sku'].isin(sku_stockoutt)) & (ds['stock_available'] == 0)]
region_stockout = sku_region_stockout.groupby(['sku', 'region']).size().reset_index(name='stockout_count')

plt.figure(figsize=(10,6))
sns.barplot(data=region_stockout, x='sku', y='stockout_count', hue='region')
plt.title('Stockout per Region untuk Top 5 SKU')
plt.ylabel('Jumlah Stockout')
plt.xlabel('SKU')
plt.tight_layout()
plt.show()

sku_monthly_stockout = ds[(ds['sku'].isin(sku_stockoutt)) & (ds['stock_available'] == 0)]
monthly_stockout = sku_monthly_stockout.groupby(['sku', 'month']).size().reset_index(name='stockout_count')

plt.figure(figsize=(14,6))
sns.lineplot(data=monthly_stockout, x='month', y='stockout_count', hue='sku', markers='o')
plt.title('Distribusi Stockout Bulanan per SKU')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Stockout')
plt.xticks(rotation=45)
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

plt.figure(figsize=(12,6))
for sku in monthly_stockout['sku'].unique():
    data_sku = monthly_stockout[monthly_stockout['sku'] == sku]
    plt.plot(data_sku['month'], data_sku['stockout_count'], marker='o', label=sku)

plt.title('Distribusi Stockout Bulanan per SKU')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Stockout')
plt.xticks(rotation=45)
plt.legend(bbox_to_anchor=(1, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Siapkan Dataset dan Buat Week
ds['week'] = ds['date'].dt.to_period('W').dt.to_timestamp()

# Agregasi mingguan per SKU
weekly_df_sku = ds.groupby(['sku', 'week']).agg({
    'units_sold': 'sum',
    'stock_available': 'sum',
    'promotion_flag': 'max'
}).reset_index()

# bangun Feature Engineering
weekly_df_sku['prev_units_sold'] = weekly_df_sku.groupby('sku')['units_sold'].shift(1)
weekly_df_sku['demand_trend'] = weekly_df_sku['units_sold'] - weekly_df_sku['prev_units_sold']
weekly_df_sku['rolling_avg_demand'] = weekly_df_sku.groupby('sku')['units_sold'].rolling(3, min_periods=1).mean().reset_index(0, drop=True)
weekly_df_sku['stock_tosales_ratio'] = weekly_df_sku['stock_available'] / weekly_df_sku['units_sold'].replace(0, np.nan)

# Target: units_sold minggu depan
weekly_df_sku['target_next_week'] = weekly_df_sku.groupby('sku')['units_sold'].shift(-1)

# Drop NaN pada target & fitur
weekly_df_sku = weekly_df_sku.dropna(subset=['target_next_week', 'prev_units_sold', 'stock_tosales_ratio'])

# Encode SKU (karena model butuh input numerik)
le = LabelEncoder()
weekly_df_sku['sku_enc'] = le.fit_transform(weekly_df_sku['sku'])

# Definisikan Features & Target
features = [
    'units_sold', 'prev_units_sold', 'demand_trend',
    'stock_tosales_ratio', 'rolling_avg_demand',
    'promotion_flag', 'sku_enc'
]
target = 'target_next_week'

X = weekly_df_sku[features]
y = weekly_df_sku[target]

# Split Train/Test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Training Model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluasi
y_pred = model.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"RMSE: {rmse:.2f}")
print(f"R-squared: {r2:.2f}")

# Feature Importance
feat_importance = pd.DataFrame({
    'feature': features,
    'importance': model.feature_importances_
}).sort_values(by='importance', ascending=False)
print("\nFeature Importance:\n", feat_importance)

# Visualisasi Prediksi vs Aktual (Sampel 50 data)
plt.figure(figsize=(10, 5))
plt.plot(y_test.values[:50], label='Actual', marker='o')
plt.plot(y_pred[:50], label='Predicted', marker='x')
plt.title('Actual vs Predicted units_sold (first 50 samples)')
plt.xlabel('Sample Index')
plt.ylabel('units_sold')
plt.legend()
plt.tight_layout()
plt.show()

"""## prediksi SKU tuk minggu depan"""

latest_week_data = weekly_df_sku.sort_values(['sku', 'week']).groupby('sku').tail(1).copy()
X_future= latest_week_data[[
    'units_sold', 'prev_units_sold', 'demand_trend',
    'stock_tosales_ratio', 'rolling_avg_demand',
    'promotion_flag', 'sku_enc'
]]

X_future = X_future.apply(pd.to_numeric, errors='coerce')
X_future = X_future.dropna()

future_pred= model.predict(X_future)
latest_week_data = latest_week_data.loc[X_future.index]
latest_week_data['predicted_next_week'] = future_pred
#tambahkan kolom tanggal minggu depan
latest_week_data['predicted_week'] = latest_week_data['week'] + pd.Timedelta(weeks=1)

latest_week_data.head()

top_pred= latest_week_data.sort_values('predicted_next_week', ascending=False).head(10)

plt.figure(figsize=(10,6))
sns.barplot(data=top_pred, x='sku', y='predicted_next_week', palette='pastel')
plt.title('Top 10 SKU dengan Prediksi demand tertinggi Minggu Depan')
plt.ylabel('Prediksi Units Sold')
plt.xlabel('SKU')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

top3_sku=latest_week_data.sort_values(by ='predicted_next_week', ascending=False).head(3)['sku'].tolist()

# Ambil data historis untuk 3 SKU tersebut
history_top3 = (weekly_df_sku[weekly_df_sku['sku'].isin(top3_sku)]
                .sort_values(['sku', 'week'])
                .groupby('sku').tail(4))[['sku', 'week', 'units_sold']]

history_top3['type'] = 'actual'

# Ambil prediksi minggu depan
pred_top3 = latest_week_data[latest_week_data['sku'].isin(top3_sku)][['sku', 'predicted_week', 'predicted_next_week']]
pred_top3 = pred_top3.rename(columns={'predicted_week': 'week', 'predicted_next_week': 'units_sold'})
pred_top3['type'] = 'predicted'

# Gabungkan ke satu DataFrame
df_plot = pd.concat([history_top3, pred_top3], ignore_index=True)

plt.figure(figsize=(10,6))

for sku in top3_sku:
    sku_hist = df_plot[df_plot['sku'] == sku].sort_values('week')

    # Plot satu garis untuk semua titik (4 minggu terakhir + 1 prediksi)
    plt.plot(
        sku_hist['week'],
        sku_hist['units_sold'],
        label=f"{sku}",
        marker='o',
        linestyle='-',
        linewidth=2
    )

    # Tambahkan highlight titik prediksi saja (biar kelihatan beda)
    pred_point = sku_hist[sku_hist['type'] == 'predicted']
    if not pred_point.empty:
        plt.plot(
            pred_point['week'],
            pred_point['units_sold'],
            marker='X',
            markersize=10,
            linestyle='--',
            color=plt.gca().lines[-1].get_color(),
            label=f"{sku} (predicted)"
        )

plt.title('4 Minggu Terakhir + Prediksi Minggu Depan (Top 3 SKU)')
plt.xlabel('Week')
plt.ylabel('Units Sold')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Salin data prediksi minggu depan
risk_df = latest_week_data[['sku', 'week', 'units_sold', 'stock_available', 'predicted_next_week', 'predicted_week']].copy()

# Prediksi risiko stockout → jika demand > stok
risk_df['risk_stockout'] = risk_df['predicted_next_week'] > risk_df['stock_available']

# Hitung rasio stok terhadap prediksi demand
risk_df['stock_ratio'] = risk_df['stock_available'] / (risk_df['predicted_next_week'])

# Cek beberapa nilai terendah
print(risk_df[['sku', 'predicted_week', 'predicted_next_week', 'stock_available', 'stock_ratio']].sort_values(by='stock_ratio'))

"""
Karena semua SKU stoknya jauh melebihi demand prediksi, tidak perlu alokasi tambahan.
Sebaliknya, insight penting adalah:
Rekomendasi optimalisasi stok – SKU seperti YO-009, MI-023, YO-012, dan RE-025 berpotensi overstock.
Jika terjadi penumpukan stok berlebih secara terus-menerus, akan berdampak pada:
Biaya penyimpanan
Risiko produk kedaluwarsa (jika perishables)
Inefisiensi modal
"""

import seaborn as sns
import matplotlib.pyplot as plt

top_overstock = risk_df.sort_values(by='stock_ratio').head(10)

plt.figure(figsize=(12,6))
sns.barplot(data=top_overstock, x='sku', y='stock_ratio', palette='coolwarm')
plt.axhline(1.0, color='black', linestyle='--', label='Ideal Ratio')
plt.title('Top 10 SKU dengan Overstock Mingguan')
plt.ylabel('Stock to Demand Ratio')
plt.legend()
plt.tight_layout()
plt.show()